version: "3.9"

services:
  postgres:
    image: postgres:16
    container_name: stori_pg
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - pgdata:/var/lib/postgresql/data

  pg-init:
    image: postgres:16
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: postgres
    command: [
      "sh","-c",
      "until pg_isready -h postgres -U postgres >/dev/null 2>&1; do sleep 1; done; \
       exists=$(psql 'postgresql://postgres:postgres@postgres:5432/postgres?sslmode=disable' -tc \"SELECT 1 FROM pg_database WHERE datname='stori'\" | tr -d '[:space:]'); \
       if [ \"$exists\" != \"1\" ]; then \
         psql 'postgresql://postgres:postgres@postgres:5432/postgres?sslmode=disable' -c 'CREATE DATABASE stori'; \
       fi"
    ]
    restart: "no"

  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: stori_mailhog
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI http://localhost:8025
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "1025"]
      interval: 5s
      timeout: 3s
      retries: 10

  transaction_manager:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: stori_transaction_manager
    depends_on:
      postgres:
        condition: service_healthy
      #pg-init:
        #condition: service_completed_successfully
      mailhog:
        condition: service_healthy
    profiles: ["manual"]
    environment:
      APP_ENV: ${APP_ENV:-dev}

      # DB
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: stori
      DB_SSLMODE: disable
      DB_MAX_OPEN: "10"
      DB_MAX_IDLE: "5"
      DB_MAX_LIFETIME_SECS: "600"

      # SMTP
      SMTP_HOST: mailhog
      SMTP_PORT: "1025"
      SMTP_FROM: ${SMTP_FROM:-no-reply@example.com}
      SMTP_USERNAME: ""
      SMTP_PASSWORD: ""

      # S3 not required, only if you want to upload the report to S3
      S3_REGION: ${S3_REGION:-us-east-1}
      S3_ENDPOINT: ${S3_ENDPOINT:-}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-}
      S3_FORCE_PATH_STYLE: ${S3_FORCE_PATH_STYLE:-false}

      REPORT_TEMPLATE_PATH: ${REPORT_TEMPLATE_PATH:-}
    volumes:
      - ./data:/data:ro
      - ./templates:/templates:ro
    restart: "no"

volumes:
  pgdata: